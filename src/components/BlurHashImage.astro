---
import Image from 'astro/components/Image.astro';
import { decode } from 'blurhash';
import sharp from 'sharp';

interface Props {
  src: string;
  alt: string;
  width: number;
  height: number;
  blurhash: string;
  class?: string;
  loading?: 'lazy' | 'eager';
}

const {
  src,
  alt,
  width,
  height,
  blurhash,
  class: className = '',
  loading = 'lazy',
} = Astro.props;

// Generate blurhash preview
let base64Image = '';

if (blurhash && blurhash.length >= 6) {
  const pixels = decode(blurhash, 32, 32);
  const buffer = Buffer.from(pixels);

  // Convert to PNG and get base64
  const sharpImage = sharp(buffer, {
    raw: {
      width: 32,
      height: 32,
      channels: 4,
    },
  });

  base64Image = await sharpImage
    .png()
    .toBuffer()
    .then((buffer) => `data:image/png;base64,${buffer.toString('base64')}`);
} else {
  // Skip blurhash generation
  console.warn('Blurhash string is too short, skipping generation.');
}
---

<div class="relative">
  <div
    class="absolute inset-0 bg-center bg-cover bg-no-repeat"
    style={`background-image: url("${base64Image}");`}
  >
  </div>
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={`relative ${className}`}
    loading={loading}
  />
</div>
