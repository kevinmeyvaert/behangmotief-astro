---
interface Props {
  src: string;
  alt: string;
  width: number | string;
  height: number | string;
  loading?: 'lazy' | 'eager';
  class?: string;
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  class: className,
} = Astro.props;

const proxiedSrc = `/api/proxy-image?url=${encodeURIComponent(src)}`;
---

<div class="fluted-glass-container">
  <img
    src={proxiedSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={`${className}`}
    crossorigin="anonymous"
  />
  <div class="absolute inset-0 z-10 flex items-center justify-center">
    <slot />
  </div>
</div>

<style>
  .fluted-glass-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: transparent;
  }

  :global(#curtains-canvas) {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    pointer-events: none !important;
    z-index: 0 !important;
  }

  :global(.curtains-canvas) {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    pointer-events: none !important;
    z-index: 0 !important;
  }
</style>

<script>
  import { Curtains, Plane } from 'curtainsjs';

  // Core settings object with final values
  const settings = {
    waves: {
      wave1: {
        frequency: 2.7,
        speed: 0.96,
        amplitude: 0.014,
      },
      wave2: {
        frequency: 0,
        speed: 0,
        amplitude: 0.01,
      },
      wave3: {
        frequency: 1,
        speed: 0.16,
        amplitude: 0.025,
      },
    },
    distortion: {
      xStrength: 0.16,
      yStrength: 0.31,
    },
    blur: {
      size: 0,
      brightness: 1,
    },
    noise: {
      scale: 170,
      strength: 0.0049,
      hoverStrength: 0.0019,
    },
    animation: {
      speed: 0.004,
    },
    transition: {
      duration: 0.5,
    },
  };

  const vertexShader = `
    precision mediump float;
    
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;
    
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    
    uniform float uTime;
    
    // Wave parameters
    uniform float uWave1Frequency;
    uniform float uWave1Speed;
    uniform float uWave1Amplitude;
    uniform float uWave2Frequency;
    uniform float uWave2Speed;
    uniform float uWave2Amplitude;
    uniform float uWave3Frequency;
    uniform float uWave3Speed;
    uniform float uWave3Amplitude;
    
    varying vec2 vTextureCoord;
    varying vec3 vPosition;
    varying float vWave;
    
    void main() {
      vec3 vertexPosition = aVertexPosition;
      
      // Create multiple waves for a fluted glass pattern
      float wave1 = sin(vertexPosition.x * uWave1Frequency - uTime * uWave1Speed) * uWave1Amplitude;
      float wave2 = sin(vertexPosition.y * uWave2Frequency + uTime * uWave2Speed) * uWave2Amplitude;
      float wave3 = sin((vertexPosition.x + vertexPosition.y) * uWave3Frequency - uTime * uWave3Speed) * uWave3Amplitude;
      
      float combinedWave = wave1 + wave2 + wave3;
      vertexPosition.z += combinedWave;
      
      gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
      
      vTextureCoord = aTextureCoord;
      vPosition = vertexPosition;
      vWave = combinedWave;
    }
  `;

  const fragmentShader = `
    precision mediump float;
    
    varying vec2 vTextureCoord;
    varying vec3 vPosition;
    varying float vWave;
    
    uniform sampler2D uSampler0;
    uniform float uTime;
    
    // Distortion parameters
    uniform float uDistortionX;
    uniform float uDistortionY;
    
    // Blur parameters
    uniform float uBlurSize;
    uniform float uBrightness;
    
    // Noise parameters
    uniform float uNoiseScale;
    uniform float uNoiseStrength;
    
    // Noise function
    float random(vec2 st) {
      return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
    }
    
    void main() {
      // Calculate distortion based on the wave
      vec2 distortedUV = vTextureCoord;
      
      // Add ripple distortion
      distortedUV.x += vWave * uDistortionX;
      distortedUV.y += vWave * uDistortionY;
      
      // Add subtle noise for a frosted effect
      vec2 noiseCoord = vTextureCoord * uNoiseScale + uTime;
      float noise = random(noiseCoord) * uNoiseStrength;
      distortedUV += noise;
      
      // Sample the texture with our distorted UVs
      vec4 color = texture2D(uSampler0, distortedUV);
      
      // Add slight brightness and blur effect
      vec4 blurColor = vec4(0.0);
      
      // Simple 5-tap blur
      blurColor += texture2D(uSampler0, distortedUV + vec2(-uBlurSize, 0.0));
      blurColor += texture2D(uSampler0, distortedUV + vec2(uBlurSize, 0.0));
      blurColor += texture2D(uSampler0, distortedUV + vec2(0.0, -uBlurSize));
      blurColor += texture2D(uSampler0, distortedUV + vec2(0.0, uBlurSize));
      blurColor += color;
      
      color = blurColor / 5.0 * uBrightness;
      
      gl_FragColor = color;
    }
  `;

  let curtainsInstance: Curtains | null = null;

  function initCurtains() {
    if (curtainsInstance) return;

    let curtainsContainer = document.getElementById('curtains-canvas');
    if (!curtainsContainer) {
      curtainsContainer = document.createElement('div');
      curtainsContainer.id = 'curtains-canvas';
      document.body.appendChild(curtainsContainer);
    }

    curtainsInstance = new Curtains({
      container: curtainsContainer,
      pixelRatio: Math.min(1.5, window.devicePixelRatio),
      premultipliedAlpha: true,
      webGL2: true,
      alpha: true,
      antialias: true,
      preserveDrawingBuffer: true,
    });

    curtainsInstance.onError(() => {
      document
        .querySelectorAll('.fluted-glass-container img')
        .forEach((element) => {
          const img = element as HTMLImageElement;
          img.style.visibility = 'visible';
        });
    });

    curtainsInstance.onSuccess(() => {
      setupPlanes();
    });
  }

  function setupPlanes() {
    if (!curtainsInstance) return;

    const containers = document.querySelectorAll('.fluted-glass-container');

    containers.forEach((container) => {
      const img = container.querySelector('img') as HTMLImageElement;
      if (!img) return;

      let isHovered = false;
      let transitionTimer: number | null = null;
      const transitionDuration = settings.transition.duration * 1000;

      const lerp = (start: number, end: number, t: number) => {
        return start * (1 - t) + end * t;
      };

      const updateTransition = (startTime: number, plane: Plane) => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / transitionDuration, 1);

        if (isHovered) {
          plane.uniforms.wave1Frequency.value = lerp(2.7, 0, progress);
          plane.uniforms.wave1Amplitude.value = lerp(0.014, 0, progress);
          plane.uniforms.wave2Frequency.value = lerp(0, 0, progress);
          plane.uniforms.wave2Amplitude.value = lerp(0.01, 0, progress);
          plane.uniforms.wave3Frequency.value = lerp(1, 0, progress);
          plane.uniforms.wave3Amplitude.value = lerp(0.025, 0, progress);
          plane.uniforms.noiseStrength.value = lerp(0.0049, 0.0019, progress);
        } else {
          plane.uniforms.wave1Frequency.value = lerp(0, 2.7, progress);
          plane.uniforms.wave1Amplitude.value = lerp(0, 0.014, progress);
          plane.uniforms.wave2Frequency.value = lerp(0, 0, progress);
          plane.uniforms.wave2Amplitude.value = lerp(0, 0.01, progress);
          plane.uniforms.wave3Frequency.value = lerp(0, 1, progress);
          plane.uniforms.wave3Amplitude.value = lerp(0, 0.025, progress);
          plane.uniforms.noiseStrength.value = lerp(0.0019, 0.0049, progress);
        }

        if (progress < 1) {
          transitionTimer = requestAnimationFrame(() =>
            updateTransition(startTime, plane)
          );
        } else {
          transitionTimer = null;
        }
      };

      const setupPlane = () => {
        if (!curtainsInstance) return;

        const params = {
          vertexShader,
          fragmentShader,
          uniforms: {
            time: {
              name: 'uTime',
              type: '1f',
              value: 0,
            },
            wave1Frequency: {
              name: 'uWave1Frequency',
              type: '1f',
              value: settings.waves.wave1.frequency,
            },
            wave1Speed: {
              name: 'uWave1Speed',
              type: '1f',
              value: settings.waves.wave1.speed,
            },
            wave1Amplitude: {
              name: 'uWave1Amplitude',
              type: '1f',
              value: settings.waves.wave1.amplitude,
            },
            wave2Frequency: {
              name: 'uWave2Frequency',
              type: '1f',
              value: settings.waves.wave2.frequency,
            },
            wave2Speed: {
              name: 'uWave2Speed',
              type: '1f',
              value: settings.waves.wave2.speed,
            },
            wave2Amplitude: {
              name: 'uWave2Amplitude',
              type: '1f',
              value: settings.waves.wave2.amplitude,
            },
            wave3Frequency: {
              name: 'uWave3Frequency',
              type: '1f',
              value: settings.waves.wave3.frequency,
            },
            wave3Speed: {
              name: 'uWave3Speed',
              type: '1f',
              value: settings.waves.wave3.speed,
            },
            wave3Amplitude: {
              name: 'uWave3Amplitude',
              type: '1f',
              value: settings.waves.wave3.amplitude,
            },
            distortionX: {
              name: 'uDistortionX',
              type: '1f',
              value: settings.distortion.xStrength,
            },
            distortionY: {
              name: 'uDistortionY',
              type: '1f',
              value: settings.distortion.yStrength,
            },
            blurSize: {
              name: 'uBlurSize',
              type: '1f',
              value: settings.blur.size,
            },
            brightness: {
              name: 'uBrightness',
              type: '1f',
              value: settings.blur.brightness,
            },
            noiseScale: {
              name: 'uNoiseScale',
              type: '1f',
              value: settings.noise.scale,
            },
            noiseStrength: {
              name: 'uNoiseStrength',
              type: '1f',
              value: settings.noise.strength,
            },
          },
          widthSegments: 20,
          heightSegments: 20,
          renderOrder: 0,
          transparent: true,
          cullFace: 'back' as const,
          texturesOptions: {
            premultiplyAlpha: true,
            generateMipmap: true,
            floatingPoint: 'float' as const,
          },
        };

        try {
          const plane = new Plane(curtainsInstance, container, params);

          plane.loadImage(img);

          plane.onReady(() => {
            img.style.visibility = 'hidden';
          });

          container.addEventListener('mouseenter', () => {
            isHovered = true;
            if (transitionTimer) {
              cancelAnimationFrame(transitionTimer);
            }
            updateTransition(Date.now(), plane);
          });

          container.addEventListener('mouseleave', () => {
            isHovered = false;
            if (transitionTimer) {
              cancelAnimationFrame(transitionTimer);
            }
            updateTransition(Date.now(), plane);
          });

          plane.onRender(() => {
            plane.uniforms.time.value += settings.animation.speed;
          });
        } catch (error) {
          img.style.visibility = 'visible';
        }
      };

      if (img.complete) {
        setupPlane();
      } else {
        img.addEventListener('load', setupPlane);
      }
    });
  }

  if (document.readyState === 'complete') {
    initCurtains();
  } else {
    window.addEventListener('load', initCurtains);
  }
</script>
