---
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from '../i18n/utils';
import LanguagePicker from './LanguagePicker.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  theme?: 'light' | 'dark';
}

const { theme = 'light' } = Astro.props;
const currentPath = new URL(Astro.request.url).pathname;
const translatePath = useTranslatedPath(lang);

const isHomeActive = currentPath === `/${lang}`;

const isArchiveActive =
  currentPath === translatePath('archive') ||
  currentPath.startsWith(translatePath('album'));
---

<nav>
  <div class="hidden md:flex space-x-8 items-center">
    <a
      href={`/${lang}`}
      class={`${theme === 'dark' ? 'text-white' : 'text-black'} hover:opacity-70 transition-opacity ${isHomeActive ? 'border-b-2 border-current' : ''}`}
    >
      {t('nav.home')}
    </a>
    <a
      href={translatePath('archive')}
      class={`${theme === 'dark' ? 'text-white' : 'text-black'} hover:opacity-70 transition-opacity ${isArchiveActive ? 'border-b-2 border-current' : ''}`}
    >
      {t('nav.archive')}
    </a>
    <LanguagePicker />
  </div>

  <!-- Mobile Menu Button -->
  <button
    id="mobile-menu-button"
    class="md:hidden"
    aria-label="Toggle mobile menu"
  >
    <svg
      class={`w-8 h-8 ${theme === 'dark' ? 'text-white' : 'text-black'}`}
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 md:hidden"
  >
    <div
      class={`fixed inset-0 ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'} p-6 transform transition-transform duration-300 translate-x-full`}
    >
      <button
        id="close-menu-button"
        class="absolute top-6 right-6"
        aria-label="Close mobile menu"
      >
        <svg
          class={`w-8 h-8 ${theme === 'dark' ? 'text-white' : 'text-black'}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      <div class="flex flex-col items-center justify-center h-full">
        <div class="flex flex-col space-y-8 text-2xl -mt-16 text-center">
          <a
            href={`/${lang}`}
            class={`${theme === 'dark' ? 'text-white' : 'text-black'} hover:opacity-70 transition-opacity ${isHomeActive ? 'font-bold' : ''}`}
          >
            {t('nav.home')}
          </a>
          <a
            href={translatePath('archive')}
            class={`${theme === 'dark' ? 'text-white' : 'text-black'} hover:opacity-70 transition-opacity ${isArchiveActive ? 'font-bold' : ''}`}
          >
            {t('nav.archive')}
          </a>
          <div class={`${theme === 'dark' ? 'text-white' : 'text-black'}`}>
            <LanguagePicker />
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMenuButton = document.getElementById('close-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileMenuContent = mobileMenu?.querySelector('div');
  const htmlElement = document.documentElement;
  const bodyElement = document.body;

  const toggleMenu = () => {
    if (mobileMenu?.classList.contains('hidden')) {
      // Open menu
      mobileMenu.classList.remove('hidden');
      // Prevent background scrolling
      htmlElement.style.overflow = 'hidden';
      bodyElement.style.overflow = 'hidden';
      setTimeout(() => {
        mobileMenuContent?.classList.remove('translate-x-full');
      }, 10);
    } else {
      // Close menu
      mobileMenuContent?.classList.add('translate-x-full');
      // Re-enable scrolling
      htmlElement.style.overflow = '';
      bodyElement.style.overflow = '';
      setTimeout(() => {
        mobileMenu?.classList.add('hidden');
      }, 300);
    }
  };

  mobileMenuButton?.addEventListener('click', toggleMenu);
  closeMenuButton?.addEventListener('click', toggleMenu);
  mobileMenu?.addEventListener('click', (e) => {
    if (e.target === mobileMenu) {
      toggleMenu();
    }
  });
</script>
