---
import { getLangFromUrl } from '@/i18n/utils';
import { languages, routes } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);

// Get the current path segments
const pathSegments = Astro.url.pathname.split('/').filter(Boolean);
// Remove the language segment
pathSegments.shift();
// Get the first segment (potential route)
const currentSegment = pathSegments[0];

// Find if this is a translated route
let baseRoute: keyof (typeof routes)[keyof typeof routes] | undefined;
if (currentSegment) {
  // Check if this is a translated route in current language
  const currentRoutes = routes[lang as keyof typeof routes];
  const matchingRoute = Object.entries(currentRoutes).find(
    ([_, value]) => value === currentSegment
  );
  if (matchingRoute) {
    baseRoute = matchingRoute[0] as keyof (typeof routes)[keyof typeof routes];
  }
}
---

<div class="flex items-center space-x-2">
  {
    Object.entries(languages).map(([code, label]) => {
      let path = '';

      if (baseRoute && code in routes) {
        // Get the translated version of the route
        path = `/${routes[code as keyof typeof routes][baseRoute]}`;

        // If there are additional segments after the translatable part
        // append them to the translated path
        const additionalSegments = pathSegments.slice(1);
        if (additionalSegments.length > 0) {
          path += `/${additionalSegments.join('/')}`;
        }
      } else if (currentSegment) {
        // If not a translated route, keep the original path
        path = `/${pathSegments.join('/')}`;
      }

      return (
        <a
          href={`/${code}${path}`}
          class:list={[
            'px-3 py-1 rounded-lg transition-colors uppercase text-sm',
            code === lang
              ? 'bg-black text-white font-bold'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200 font-medium',
          ]}
        >
          {code}
        </a>
      );
    })
  }
</div>
