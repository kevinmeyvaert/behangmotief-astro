---
import Layout from '../../layouts/Layout.astro';
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from '../../i18n/utils';
import { fetcher } from '../../lib/graphql-client';
import PostGrid from '../../components/PostGrid.astro';
import Pagination from '../../components/Pagination.astro';
import Header from '@/components/Header.astro';
import SearchField from '@/components/SearchField.astro';
import { POSTS } from '@/lib/queries';
import type { SearchQuery } from '@/types/wannabes.types';
import { routes } from '@/i18n/ui';

// Remove prerender flag to allow dynamic searching
// export async function getStaticPaths() {
//   return Object.entries(routes).map(([locale, r]) => ({
//     params: {
//       locale,
//       archive: r.archive,
//     },
//   }));
// }

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

// Get search param if it exists
const searchParam = Astro.url.searchParams.get('search') || '';
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const POSTS_PER_PAGE = 15;

// Fetch posts with pagination
const { posts } = await fetcher<SearchQuery>(POSTS, {
  start: (currentPage - 1) * POSTS_PER_PAGE,
  limit: POSTS_PER_PAGE,
  all: searchParam || undefined,
});

const totalPages = Math.ceil(posts.pagination.total / POSTS_PER_PAGE);
---

<Layout title={t('archive.title')} description={t('archive.description')}>
  <Header />
  <main class="container mx-auto px-4 md:px-0 py-8">
    <SearchField
      currentSearch={searchParam}
      archiveRoute={translatePath('/archive')}
    />

    <PostGrid posts={posts.data} loading="eager" />

    <div class="my-12">
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={translatePath('/archive')}
      />
    </div>
  </main>
</Layout>
